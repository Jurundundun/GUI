package ru.psu.techjava.repositories

import javafx.collections.FXCollections
import javafx.collections.ObservableList
import ru.psu.techjava.model.Order
import tornadofx.*

/********************************************************************************************************
  Репозиторий с запросами к серверу в части списка обращений
  Описание: обрабатывает данные между сервером и локальным списком
 *******************************************************************************************************/
class OrderRepository : Controller()
{
    //Объект для отправки запросов к API сервера.
    private val api : Rest by inject()
    //"Кэшированный" список обращений для локальной работы.
    private val order = FXCollections.observableArrayList<Order>()

    /****************************************************************************************************
    Запрос списка всех доступных объектов на сервере и сохранение их в локальный список
    Выход: локальный список обращений с сервера
     ***************************************************************************************************/
    fun getAll() : ObservableList<Order>
    {
        //Запрашиваем актуальные данные на сервере
        val listFromServer = requestAll()
        //Пересохраняем в локальный список, в котором дополнительно будем
        //кэшировать изменения в процессе редактирования таблицы.
        order.addAll(listFromServer)
        //Возвращаем ссылку на кэш.
        return order
    }
    /****************************************************************************************************
    Запрос списка обращений на сервере и обработка возможных проблем
    Выход: список гобращений с сервера или возможная ошибка
     ***************************************************************************************************/
    private fun requestAll() : ObservableList<Order>
    {
        var response : Rest.Response? = null
        try {
            //Выполнение GET запроса к пути /appeals
            response = api.get("order")
            if (response.ok()) {
                //Конвертация json в список объектов типа Appeal
                return response.list().toModel()
            }
            else if (response.statusCode == 404)
                throw Exception("404")
            else
                throw Exception("getCustomer returned ${response.statusCode} ${response.reason}")
        }
        catch(e : Exception)
        {
            throw Exception("Отсутствует соединение с сервером.", e)
        }
        finally {
            response?.consume()
        }
    }

    /****************************************************************************************************
    Отправка локального списка объектов на сервер
    Описание: перенос изменение данных, имеющихся в локальном списке, на сервер
     ***************************************************************************************************/
    fun saveAll()
    {
        //Запрос данных с сервера
        val appealsFromServer = requestAll()

        //Перебираем все обращения с сервера, те которых нет в локальном списке удаляем
        appealsFromServer.forEach { AppealFromServer ->
                if (!order.contains(AppealFromServer))
                {
                    api.delete("order", AppealFromServer)
                }
            }
        //Перебираем все записи из локального кэша
        var temp : List<Order>
        order.forEach { AppealLocal->
                //Для каждой локальной записи находим записи из сервера с такими же id
                temp = appealsFromServer.filter { AppealFromServer ->
                        AppealLocal.equals(AppealFromServer) }
                //Записи с такими же id фильтруем по наличию изменений
                temp.firstOrNull { AppealFromServer ->
                        AppealLocal.hasChanges(AppealFromServer)
                    }
                    //Если изменения в полях есть, публикуем текущую запись на сервер
                    ?.let {api.post("order", AppealLocal)}
                //Если вообще на сервере записей с таким id нет публикуем текущую запись
                if (temp.isEmpty())
                    api.post("order", AppealLocal)
            }
    }
    /****************************************************************************************************
      Добавление обращения в локальный список.
      Вход: Appeal - объект для отправки.
     ***************************************************************************************************/
    fun add(ordr : Order) { order.add(ordr) }

    /****************************************************************************************************
      Удаление обращения из локального списка.
      Вход: Appeal - объект для отправки.
     ***************************************************************************************************/
    fun delete(ordr : Order) { order.remove(ordr) }
}